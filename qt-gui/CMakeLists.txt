cmake_minimum_required(VERSION 3.9)
project(avr-avogadro)

# Find the QtWidgets library
find_package(Qt5Widgets)

message("[INFO] Project root is: ${PROJECT_SOURCE_DIR}")

set(CMAKE_AUTOMOC ON)

# Agrego ej3/include a la lista de directorios de includes
include_directories(${PROJECT_SOURCE_DIR}/include)

# This macro takes each of the parameters and executes *uic* over them
# The *uic* app generates headers with the widgets definition from an .ui file
# Names of the generated files are stored in a variable with the name
# of the first parameter.
# No, they won't be generated in folders, *ui/* prefix is ignored.
qt5_wrap_ui(UIS_HEADERS
        ui/MainWindow.ui
        ui/RegisterWidget.ui
)

# QHexEdit2 Includes
set(QHEXEDIT_SRC ${PROJECT_SOURCE_DIR}/3rd-party/qhexedit2/src)
include_directories(${QHEXEDIT_SRC})
# I add the folder with de autogenerated files
message("'${PROJECT_BINARY_DIR}' was included in the header path")
include_directories(${PROJECT_BINARY_DIR})

message("Generated headers: ${UIS_HEADERS}")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")

add_library(avogadrogui
  api.cpp
  src/MainWindow.cpp
  src/McuWrapper.cpp
  src/NumericEdit.cpp
  src/RegisterLineEdit.cpp
  src/RegisterWidget.cpp
  ${QHEXEDIT_SRC}/chunks.cpp
  ${QHEXEDIT_SRC}/commands.cpp
  ${QHEXEDIT_SRC}/qhexedit.cpp
  ${UIS_HEADERS})


# Use the Widgets module from Qt 5.
target_link_libraries(avogadrogui Qt5::Core Qt5::Widgets)

install(TARGETS avogadrogui DESTINATION .)
